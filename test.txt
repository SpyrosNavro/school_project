Η εκτέλεση του NN Descent αλγορίθμου γίνεται ως εξης:
make nndescent
./nndescent

Η εκτέλεση των tests για το Priority Queue γίνεται ως εξης:
make testpq
./testpq

Η εκτέλεση των tests για το Graph γίνεται ως εξης:
make testgraph
./testgraph

Ο έλεγχος για leaks των συναρτήσεων γίνεται ως εξης:
make valgrind
Για testGraph, στο Makefile στην γραμμή 51 γράφουμε:
valgrind --leak-check=full --show-leak-kinds=all  --track-origins=yes ./testgraph

Για testPriorityQueue, στο Makefile στην γραμμή 51 γράφουμε:
valgrind --leak-check=full --show-leak-kinds=all  --track-origins=yes ./testpq

Ο καθαρισμός των εκτελέσιμων αρχείων και της οθόνης terminal γίνεται ως εξης:
make clean



Για να είναι το πρόγραμμα πιο δυναμικό έχουμε προσθέσει ένα configuration.txt αρχείο που δέχεται το αρχείο που θα ανοίξει με τα data, το πλήθος των data, την διάσταση των στοιχείων, τον αριθμό των γειτόνων και η παράμετρος για τον πρόορο τερματισμό. Για να λειτουργήσει σωστά ο αλγόριθμος, πρέπει να εισαχθούν τα στοιχεία με την σειρά που αναφέρθηκε πιο πριν. Με αυτόν τον τρόπο δεν χρειάζεται να μεταγλωτίζουμε πολλές φορές τον κώδικα.



Το κομμάτι κώδικα που υλοποίσε ο Σπύρος:
graph.c
nndescent.c
testGraph.c
LocalJoin
Thread Pools
Updated function for distance

Το κομμάτι κώδικα που υλοποίησε η Τζωρτζίνα:
testPQ.c
graph.c
Early Termination
Random Projection Tree



Μια σημαντική βελτίωση που παρατηρήσαμε στον κώδικα είναι η χρήση του Local Join για τα την εύρεση των κοντινότερων γειτόνων. Παρατηρήσαμε ότι η σύγκριση των άμεσων γειτόνων ενός κόμβου μεταξύ τους είναι πιο γρήγορο από το να κοιτάμε γείτονες γειτόνων.

Επίσης, μια σημαντική βελτιστοποίηση είναι η χρήση των νημάτων(threads) για την παράλληλη εκτέλεση μικρών ενεργείων όπως τον υπολογισμό της Νόρμας ενός ν-διάστατου στοιχείου. 
